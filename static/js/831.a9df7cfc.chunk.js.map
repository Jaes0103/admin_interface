{"version":3,"file":"static/js/831.a9df7cfc.chunk.js","mappings":"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","sources":["components/AnimalDetailsPage.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport '../style/AnimalDetailsPage.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { useNavigate } from 'react-router-dom';\n\nconst AnimalDetails = () => {\n  const navigate = useNavigate();\n  const { id: animalId } = useParams(); \n  const [animal, setAnimal] = useState(null);\n  const [healthRecords, setHealthRecords] = useState([]);\n  const [medications, setMedications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [observations, setObservations] = useState([]);\n  const [observationDialogVisible, setObservationDialogVisible] = useState(false);\n  const [selectedObservation, setSelectedObservation] = useState(null);\n  const [observationToDelete, setObservationToDelete] = useState(null); \n  const [medicalUpdate, setMedicalUpdate] = useState({\n    checkupDate: format(new Date(), 'yyyy-MM-dd'),\n    healthStatus: '',\n    labResults: '',\n    nextCheckupDate: '',\n    observations: '',\n  });\n\n  const [showHealthRecordDialog, setShowHealthRecordDialog] = useState(false);\n  const [showMedicationDialog, setShowMedicationDialog] = useState(false);\n  const [selectedMedication, setSelectedMedication] = useState(null);\n  const [selectedHealthRecordId, setSelectedHealthRecordId] = useState(null);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [medicationToDelete, setMedicationToDelete] = useState(null);\n\n  const fetchAnimalDetails = useCallback(async () => {\n    setLoading(true);\n    try {\n        const response = await axios.get(\n            `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}`\n        );\n        console.log(\"Fetched animal details:\", response.data); \n        setAnimal(response.data.animal || {});\n        setHealthRecords(response.data.healthRecords || []);\n        setError(null);\n    } catch (err) {\n        console.error(err); \n        setError({\n            message: 'Error fetching animal details',\n            details: err.response ? err.response.data : err.message,\n        });\n    } finally {\n        setLoading(false);\n    }\n}, [animalId]);\n\nconst fetchMedications = useCallback(async () => {\n    if (healthRecords.length === 0) return; \n    try {\n        const response = await axios.get(\n            `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/medications`\n        );\n        console.log(\"Fetched medications:\", response.data); // Log the medications\n        setMedications(response.data || []);\n    } catch (err) {\n        console.error(err); // Log the error\n        setError({\n            message: 'Error fetching medications',\n            details: err.response ? err.response.data : err.message,\n        });\n    }\n}, [animalId, healthRecords]);\n\nconst fetchObservations = useCallback(async (animalId) => {\n  console.log('Fetching observations for Animal ID:', animalId);\n  if (!animalId) return;\n  try {\n    const response = await axios.get(`${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/observations`);\n    console.log(\"Fetched observations:\", response.data);\n    setObservations(response.data || []);\n  } catch (err) {\n    console.error(\"Error fetching observations:\", err);\n    setError({ message: 'Error fetching observations', details: err.response ? err.response.data : err.message });\n  }\n}, \n [animalId]);\nuseEffect(() => {\n  if (animalId) {\n    fetchAnimalDetails();\n  } else {\n    setError({ message: 'Invalid animal ID' });\n    setLoading(false);\n  }\n}, [animalId, fetchAnimalDetails]);\n\nuseEffect(() => {\n  fetchMedications();\n}, [healthRecords, fetchMedications]);\n\nuseEffect(() => {\n  if (selectedHealthRecordId) {\n    console.log(\"Fetching observations for selected health record ID:\", selectedHealthRecordId);\n    fetchObservations(selectedHealthRecordId);\n  }\n}, [selectedHealthRecordId, fetchObservations]);\n\nuseEffect(() => {\n  if (healthRecords.length > 0) {\n    setSelectedHealthRecordId(healthRecords[0].id); \n  }\n}, [healthRecords]);\n\n\nconst handleMedicationChange = (event) => {\n  const { name, value } = event.target;\n  setSelectedMedication((prev) => ({\n      ...prev,\n      [name]: value,\n  }));\n};\n\n// Function to handle editing an observation\nconst handleEditObservation = (observation) => {\n  console.log(\"Editing Observation:\", observation);\n  setSelectedObservation(observation); \n  setObservationDialogVisible(true); \n};\n\n// Function to submit observation (both create and update)\nconst submitObservationUpdate = async () => {\n  if (!selectedObservation) return;\n  try {\n    if (selectedObservation.id) {\n      // Update existing observation\n      await axios.put(`${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/observations/${selectedObservation.id}`, {\n        note: selectedObservation.note,\n        observation_date: selectedObservation.observation_date,\n      });\n    } else {\n      // Create new observation\n      await axios.post(`${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/observations`, {\n        note: selectedObservation.note,\n        observation_date: selectedObservation.observation_date,\n      });\n    }\n    // Fetch updated observations\n    await fetchObservations(animalId); \n    setObservationDialogVisible(false); \n  } catch (err) {\n    \n    console.error('Error details:', err); \n    setError({ \n      message: 'Error updating observation', \n      details: err.response ? err.response.data : err.message \n    });\n  }\n};\n\n\nuseEffect(() => {\n  if (animalId) {\n    fetchAnimalDetails();\n  } else {\n    setError({ message: 'Invalid animal ID' });\n    setLoading(false);\n  }\n}, [animalId, fetchAnimalDetails]);\n\n  const handleMedicalUpdateChange = (e) => {\n    setMedicalUpdate({ ...medicalUpdate, [e.target.name]: e.target.value });\n  };\n  const handleObservationChange = (e) => {\n    setSelectedObservation({\n      ...selectedObservation,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const submitHealthRecordUpdate = async (recordId) => {\n    try {\n      if (recordId) {\n        await axios.put(\n          `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/health-records/${recordId}`,\n          {\n            health_status: medicalUpdate.healthStatus,\n            checkup_date: medicalUpdate.checkupDate,\n            lab_results: medicalUpdate.labResults,\n            next_checkup_date: medicalUpdate.nextCheckupDate,\n          }\n        );\n      } else {\n        await axios.post(\n          `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/health-records`,\n          {\n            health_status: medicalUpdate.healthStatus,\n            checkup_date: medicalUpdate.checkupDate,\n            lab_results: medicalUpdate.labResults,\n            next_checkup_date: medicalUpdate.nextCheckupDate,\n          }\n        );\n      }\n      await fetchAnimalDetails(); \n      setShowHealthRecordDialog(false); \n    } catch (err) {\n      setError({\n        message: 'Error updating health record',\n        details: err.response ? err.response.data : err.message,\n      });\n    }\n  };\n  const submitMedicationUpdate = async () => {\n    if (!selectedMedication || !animalId || !selectedHealthRecordId) return;\n\n    try {\n        if (selectedMedication.id) {\n            await axios.put(\n                `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/medications/${selectedMedication.id}`,\n                {\n                    medication_name: selectedMedication.medication_name,\n                    dosage: selectedMedication.dosage,\n                    frequency: selectedMedication.frequency,\n                    status: selectedMedication.status,\n                    start_date: selectedMedication.start_date,\n                    end_date: selectedMedication.end_date,\n                }\n            );\n        } else {\n            await axios.post(\n                `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/medications`,\n                {\n                    medication_name: selectedMedication.medication_name,\n                    dosage: selectedMedication.dosage,\n                    frequency: selectedMedication.frequency,\n                    status: selectedMedication.status,\n                    start_date: selectedMedication.start_date,\n                    end_date: selectedMedication.end_date,\n                }\n            );\n        }\n        await fetchAnimalDetails(); \n        setShowMedicationDialog(false); \n    } catch (err) {\n        setError({\n            message: 'Error updating medications',\n            details: err.response ? err.response.data : err.message,\n        });\n    }\n};\n\nconst handleDeleteObservationClick = (observationId) => {\n  setObservationToDelete(observationId); \n  setShowDeleteConfirmation(true);      \n};\n\nconst confirmDeleteObservation = async () => {\n  try {\n    await axios.delete(`${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/observations/${observationToDelete}`);\n    await fetchAnimalDetails(); \n    setShowDeleteConfirmation(false); \n    setObservationToDelete(null); \n  } catch (err) {\n    setError({\n      message: 'Error deleting observation',\n      details: err.response ? err.response.data : err.message,\n    });\n  }\n};\n  const handleDeleteHealthRecord = async (recordId) => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this health record? This action cannot be undone.');\n    if (!confirmDelete) {\n      return; \n    }\n    try {\n      await axios.delete(`${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/health-records/${recordId}`);\n      await fetchAnimalDetails();  \n    } catch (err) {\n      setError({\n        message: 'Error deleting health record',\n        details: err.response ? err.response.data : err.message,\n      });\n    }\n  };\n  \n  const handleDeleteMedication = (medicationId) => {\n    setMedicationToDelete(medicationId); // Set the medication ID to be deleted\n    setShowDeleteConfirmation(true); // Show the confirmation modal\n  };\n\n  // Function to confirm deletion\n  const confirmDeleteMedication = async () => {\n    if (medicationToDelete) {\n      try {\n        await axios.delete(\n          `${process.env.REACT_APP_BASE_URL}/api/admin/animals/${animalId}/medications/${medicationToDelete}`\n        );\n        await fetchMedications(); // Refresh the medication list after deletion\n      } catch (err) {\n        setError({\n          message: 'Error deleting medication',\n          details: err.response ? err.response.data : err.message,\n        });\n      } finally {\n        setShowDeleteConfirmation(false); // Hide the confirmation modal\n        setMedicationToDelete(null); // Clear the medication ID\n      }\n    }\n  };\n  const handleHealthRecordSubmit = async (e) => {\n    e.preventDefault();\n    await submitHealthRecordUpdate(selectedHealthRecordId);\n  };\n  const handleMedicationSubmit = async (e) => {\n    e.preventDefault(); \n    await submitMedicationUpdate();\n  };  \n\n  if (loading) {\n    return <div>Loading animal details...</div>;\n  }\n\n    if (error) {\n        return (\n          <div>\n            <div>{error.message}</div>\n            {error.details && (\n              <div className=\"error-details\">\n                {typeof error.details === 'string' ? error.details : JSON.stringify(error.details)}\n              </div>\n            )}\n          </div>\n        );\n      }\n      \n  return (\n    <div className=\"animal-details-page\">\n      <button onClick={() => navigate('/animals')}>Back to Animal List</button>\n      <div className=\"animal-box\">\n  <h1>Animal Details</h1>\n  {animal.imgurl ? (\n    <img src={animal.imgurl} alt={animal.name} className=\"animal-details-image\" />\n  ) : (\n    <div className=\"no-image-placeholder\">No Image Available</div>\n  )}\n  \n  <h2>{animal.name}</h2>\n  \n  <div className=\"animal-details-container\">\n    {/* Column 1 */}\n    <div className=\"animal-details-column\">\n      <p>\n        <strong>Type:</strong> {animal.type}\n      </p>\n      <p>\n        <strong>Breed:</strong> {animal.breed}\n      </p>\n      <p>\n        <strong>Age:</strong> {animal.age}\n      </p>\n      <p>\n        <strong>Size:</strong> {animal.size}\n      </p>\n      <p>\n        <strong>Birthdate:</strong> {new Date(animal.birthdate).toLocaleDateString()}\n      </p>\n    </div>\n    \n    {/* Column 2 */}\n    <div className=\"animal-details-column\">\n      <p>\n        <strong>Location:</strong> {animal.location}\n      </p>\n      <p>\n        <strong>Background:</strong> {animal.background}\n      </p>\n      <p>\n        <strong>Personality:</strong> {animal.personality}\n      </p>\n      <p>\n        <strong>Status:</strong> {animal.status}\n      </p>\n    </div>\n  </div>\n  \n  <h3>Health Records</h3>\n  {healthRecords.length === 0 ? (\n    <p>No health records available.</p>\n  ) : (\n    <table>\n      <thead>\n        <tr>\n          <th>Checkup Date</th>\n          <th>Health Status</th>\n          <th>Lab Results</th>\n          <th>Next Checkup Date</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n  {healthRecords.map((record) => (\n    <tr key={record.id}>\n      <td>{format(new Date(record.checkup_date), 'MM/dd/yyyy')}</td>\n      <td>{record.health_status}</td>\n      <td>{record.lab_results}</td>\n      <td>{format(new Date(record.next_checkup_date), 'MM/dd/yyyy')}</td>\n      <td>\n        <button\n          onClick={() => {\n            setSelectedHealthRecordId(record.id); \n            setShowHealthRecordDialog(true);\n            setMedicalUpdate({\n              checkupDate: format(new Date(record.checkup_date), 'yyyy-MM-dd'),\n              healthStatus: record.health_status,\n              labResults: record.lab_results,\n              nextCheckupDate: format(new Date(record.next_checkup_date), 'yyyy-MM-dd'),\n            });\n          }}\n        >\n          <i className=\"fa fa-pencil\"></i> \n        </button>\n        <button onClick={() => handleDeleteHealthRecord(record.id)}>\n          <i className=\"fa fa-trash\"></i> \n        </button>\n      </td>\n    </tr>\n  ))}\n</tbody>\n\n    </table>\n  )}\n  \n  <button\n    onClick={() => {\n      setShowHealthRecordDialog(true);\n      setSelectedHealthRecordId(null);\n      setMedicalUpdate({\n        checkupDate: format(new Date(), 'yyyy-MM-dd'),\n        healthStatus: '',\n        labResults: '',\n        nextCheckupDate: '',\n      });\n    }}\n  >\n    Update Health Record\n  </button>\n\n  {/* Health Record Dialog Box */}\n    {showHealthRecordDialog && (\n      <div className=\"dialog-overlay\">\n        <div className=\"dialog-box\">\n          <h4>{selectedHealthRecordId ? 'Edit Health Record' : 'Add Health Record'}</h4> {/* Display correct title */}\n          <form onSubmit={handleHealthRecordSubmit}>\n            <div>\n              <label>Checkup Date</label>\n              <input\n                type=\"date\"\n                name=\"checkupDate\"\n                value={medicalUpdate.checkupDate}\n                onChange={handleMedicalUpdateChange}\n                required\n              />\n            </div>\n            <div>\n              <label>Health Status</label>\n              <input\n                type=\"text\"\n                name=\"healthStatus\"\n                value={medicalUpdate.healthStatus}\n                onChange={handleMedicalUpdateChange}\n                required\n              />\n            </div>\n            <div>\n              <label>Lab Results</label>\n              <input\n                type=\"text\"\n                name=\"labResults\"\n                value={medicalUpdate.labResults}\n                onChange={handleMedicalUpdateChange}\n              />\n            </div>\n            <div>\n              <label>Next Checkup Date</label>\n              <input\n                type=\"date\"\n                name=\"nextCheckupDate\"\n                value={medicalUpdate.nextCheckupDate}\n                onChange={handleMedicalUpdateChange}\n              />\n            </div>\n            <button type=\"submit\">Save</button>\n            <button type=\"button\" onClick={() => setShowHealthRecordDialog(false)}>\n              Cancel\n            </button>\n          </form>\n        </div>\n      </div>\n    )}\n         {/* Medications Section */}\n      <h3>Medications</h3>\n      {medications.length === 0 ? (\n        <p>No medications available.</p>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <th>Medication Name</th>\n              <th>Dosage</th>\n              <th>Frequency</th>\n              <th>Status</th>\n              <th>Date Started</th>\n              <th>Date Ended</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {medications.map((medication) => (\n              <tr key={medication.id}>\n                <td>{medication.medication_name}</td>\n                <td>{medication.dosage}</td>\n                <td>{medication.frequency}</td>\n                <td>{medication.status}</td>\n                <td>{format(new Date(medication.start_date), 'MM/dd/yyyy')}</td>\n                <td>{medication.end_date ? format(new Date(medication.end_date), 'MM/dd/yyyy') : 'N/A'}</td>\n                <td>\n                  <button\n                    onClick={() => {\n                      setSelectedMedication(medication);\n                      setShowMedicationDialog(true);\n                    }}\n                  >\n                    <i className=\"fa fa-pencil\"></i>\n                  </button>\n                  <button onClick={() => handleDeleteMedication(medication.id)}>\n                    <i className=\"fa fa-trash\"></i>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n      {/* Button to Add Medication */}\n      <button\n        onClick={() => {\n          setShowMedicationDialog(true);\n          setSelectedMedication({});\n        }}\n      >\n        Add Medication\n      </button>\n\n      {/* Confirmation Modal for Deletion */}\n      {showDeleteConfirmation && (\n        <div className=\"dialog-overlay\">\n          <div className=\"dialog-box\">\n            <h4>Confirm Deletion</h4>\n            <p>Are you sure you want to delete this medication? This action cannot be undone.</p>\n            <button onClick={confirmDeleteMedication}>Yes, Delete</button>\n            <button onClick={() => setShowDeleteConfirmation(false)}>Cancel</button>\n          </div>\n        </div>\n      )}\n\n      {/* Medication Dialog Box */}\n      {showMedicationDialog && (\n        <div className=\"dialog-overlay\">\n          <div className=\"dialog-box\">\n            <h4>Add Medication</h4>\n            <form onSubmit={(e) => { e.preventDefault(); submitMedicationUpdate(); }}>\n              <div>\n                <label>Medication Name</label>\n                <input\n                  type=\"text\"\n                  name=\"medication_name\"\n                  value={selectedMedication.medication_name || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Dosage</label>\n                <input\n                  type=\"text\"\n                  name=\"dosage\"\n                  value={selectedMedication.dosage || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Frequency</label>\n                <input\n                  type=\"text\"\n                  name=\"frequency\"\n                  value={selectedMedication.frequency || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Status</label>\n                <input\n                  type=\"text\"\n                  name=\"status\"\n                  value={selectedMedication.status || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Start Date</label>\n                <input\n                  type=\"date\"\n                  name=\"start_date\"\n                  value={selectedMedication.start_date || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>End Date</label>\n                <input\n                  type=\"date\"\n                  name=\"end_date\"\n                  value={selectedMedication.end_date || ''}\n                  onChange={handleMedicationChange}\n                />\n              </div>\n              <button type=\"submit\">Save</button>\n              <button type=\"button\" onClick={() => setShowMedicationDialog(false)}>\n                Cancel\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n      {/* Medication Dialog Box */}\n      {showMedicationDialog && (\n        <div className=\"dialog-overlay\">\n          <div className=\"dialog-box\">\n            <h4>Add Medication</h4>\n            <form onSubmit={(e) => { e.preventDefault(); submitMedicationUpdate(); }}>\n              <div>\n                <label>Medication Name</label>\n                <input\n                  type=\"text\"\n                  name=\"medication_name\"\n                  value={selectedMedication.medication_name || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Dosage</label>\n                <input\n                  type=\"text\"\n                  name=\"dosage\"\n                  value={selectedMedication.dosage || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Frequency</label>\n                <input\n                  type=\"text\"\n                  name=\"frequency\"\n                  value={selectedMedication.frequency || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Status</label>\n                <input\n                  type=\"text\"\n                  name=\"status\"\n                  value={selectedMedication.status || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>Start Date</label>\n                <input\n                  type=\"date\"\n                  name=\"start_date\"\n                  value={selectedMedication.start_date || ''}\n                  onChange={handleMedicationChange}\n                  required\n                />\n              </div>\n              <div>\n                <label>End Date</label>\n                <input\n                  type=\"date\"\n                  name=\"end_date\"\n                  value={selectedMedication.end_date || ''}\n                  onChange={handleMedicationChange}\n                />\n              </div>\n              <button type=\"submit\">Save</button>\n              <button type=\"button\" onClick={() => setShowMedicationDialog(false)}>\n                Cancel\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n      <h3>Observations</h3>\n        {observations.length === 0 ? (\n          <p>No observations available.</p>\n        ) : (\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Observation</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {observations.map((observation) => (\n                <tr key={observation.id}>\n                  <td>\n                    {observation.observation_date\n                      ? format(new Date(observation.observation_date), 'MM/dd/yyyy')\n                      : 'No Date Available'}\n                  </td>\n                  <td>{observation.note}</td>\n                  <td>\n                    <button onClick={() => handleEditObservation(observation)}>\n                      <i className=\"fa fa-pencil\"></i>\n                    </button>\n                    <button onClick={() => handleDeleteObservationClick(observation.id)}>\n                      <i className=\"fa fa-trash\"></i>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n              {showDeleteConfirmation && (\n                <div className=\"dialog-overlay\">\n                  <div className=\"dialog-box\">\n                    <h4>Confirm Deletion</h4>\n                    <p>Are you sure you want to delete this observation? This action cannot be undone.</p>\n                    <button onClick={confirmDeleteObservation}>Yes, Delete</button>\n                    <button onClick={() => setShowDeleteConfirmation(false)}>Cancel</button>\n                  </div>\n                </div>\n              )}\n            </tbody>\n          </table>\n        )}\n\n            <button\n              onClick={() => {\n                setSelectedObservation({});\n                setObservationDialogVisible(true);\n              }}\n            >\n      Add Observation\n    </button>\n\n       {/* Observation Dialog Box */}\n        {observationDialogVisible && (\n          <div className=\"dialog-overlay\">\n            <div className=\"dialog-box\">\n              <h4>{selectedObservation.id ? 'Edit Observation' : 'Add Observation'}</h4>\n              <form onSubmit={(e) => { e.preventDefault(); submitObservationUpdate(); }}>\n                <div>\n                  <label>Observation</label>\n                  <input\n                    type=\"text\"\n                    name=\"note\"\n                    value={selectedObservation.note || ''}\n                    onChange={handleObservationChange}\n                    required\n                  />\n                </div>\n                <div>\n                  <label>Date</label>\n                  <input\n                    type=\"date\"\n                    name=\"observation_date\"\n                    value={\n                      selectedObservation.observation_date\n                        ? format(new Date(selectedObservation.observation_date), 'yyyy-MM-dd')\n                        : ''\n                    }\n                    onChange={handleObservationChange}\n                    required\n                  />\n                </div>\n                <button type=\"submit\">{selectedObservation.id ? 'Update' : 'Save'}</button>\n                <button type=\"button\" onClick={() => setObservationDialogVisible(false)}>\n                  Cancel\n                </button>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n    export default AnimalDetails;\n"],"names":["AnimalDetails","navigate","useNavigate","id","animalId","useParams","animal","setAnimal","useState","healthRecords","setHealthRecords","medications","setMedications","loading","setLoading","error","setError","observations","setObservations","observationDialogVisible","setObservationDialogVisible","selectedObservation","setSelectedObservation","observationToDelete","setObservationToDelete","medicalUpdate","setMedicalUpdate","checkupDate","format","Date","healthStatus","labResults","nextCheckupDate","showHealthRecordDialog","setShowHealthRecordDialog","showMedicationDialog","setShowMedicationDialog","selectedMedication","setSelectedMedication","selectedHealthRecordId","setSelectedHealthRecordId","showDeleteConfirmation","setShowDeleteConfirmation","medicationToDelete","setMedicationToDelete","fetchAnimalDetails","useCallback","async","response","axios","get","console","log","data","err","message","details","fetchMedications","length","fetchObservations","useEffect","handleMedicationChange","event","name","value","target","prev","handleMedicalUpdateChange","e","handleObservationChange","submitMedicationUpdate","put","medication_name","dosage","frequency","status","start_date","end_date","post","_jsx","children","_jsxs","className","JSON","stringify","onClick","imgurl","src","alt","type","breed","age","size","birthdate","toLocaleDateString","location","background","personality","map","record","checkup_date","health_status","lab_results","next_checkup_date","window","confirm","delete","recordId","handleDeleteHealthRecord","onSubmit","preventDefault","submitHealthRecordUpdate","onChange","required","medication","handleDeleteMedication","medicationId","observation","observation_date","note","handleEditObservation","handleDeleteObservationClick","observationId","submitObservationUpdate"],"sourceRoot":""}