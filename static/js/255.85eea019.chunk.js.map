{"version":3,"file":"static/js/255.85eea019.chunk.js","mappings":"yJAIA,MAsCA,EAtCkBA,IAAmB,IAAlB,IAAEC,EAAG,IAAEC,GAAKF,EAC7B,MAAOG,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAASC,EAAAA,EAAAA,QAAO,MAwBtB,OAtBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAW,IAAIC,sBAClBC,IACCA,EAAQC,SAASC,IACXA,EAAMC,iBACRV,GAAa,GACbK,EAASM,UAAUF,EAAMG,QAC3B,GACA,GAEJ,CAAEC,UAAW,KAOf,OAJIX,EAAOY,SACTT,EAASU,QAAQb,EAAOY,SAGnB,KACDZ,EAAOY,SAAST,EAASM,UAAUT,EAAOY,QAAQ,CACvD,GACA,KAGDE,EAAAA,EAAAA,KAAA,OACEC,IAAKf,EACLL,IAAKE,EAAYF,EAAM,GACvB,WAAUA,EACVC,IAAKA,EACLoB,QAAQ,OACRC,MAAO,CAAEC,QAASrB,EAAY,EAAI,GAAKsB,WAAY,iBACnD,C,8GC/BN,MA4FA,EA5FqBC,KACnB,MAAOC,EAAOC,IAAYvB,EAAAA,EAAAA,UAAS,KAC5BwB,EAAUC,IAAezB,EAAAA,EAAAA,UAAS,KAClC0B,EAAiBC,IAAsB3B,EAAAA,EAAAA,UAAS,KAChD4B,EAAOC,IAAY7B,EAAAA,EAAAA,UAAS,KAC5B8B,EAASC,IAAc/B,EAAAA,EAAAA,UAAS,IACjCgC,GAAWC,EAAAA,EAAAA,MAmCjB,OACElB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCpB,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACzC,IAAK0C,EAAMzC,IAAI,OAAOqC,UAAU,OAAOjB,QAAQ,UAC1DF,EAAAA,EAAAA,KAAA,MAAImB,UAAU,iBAAgBC,SAAC,aAC9BP,IAASb,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,gBAAeC,SAAEP,IACvCE,IAAWf,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,kBAAiBC,SAAEL,KAC5CM,EAAAA,EAAAA,MAAA,QAAMG,SAxCWC,UAKrB,GAJAC,EAAEC,iBACFb,EAAS,IACTE,EAAW,IAEPP,IAAaE,EAKjB,IAQ0B,aANDiB,EAAAA,EAAMC,KAAK,yEAAwD,CACxFtB,QACAE,cAIWqB,SACXd,EAAW,8CAEXe,YAAW,IAAMd,EAAS,WAAW,KAEzC,CAAE,MAAOJ,GACHA,EAAMmB,SAERlB,EAASD,EAAMmB,SAASC,KAAKC,SAAW,yCAExCpB,EAAS,wCAEb,MAxBEA,EAAS,yBAwBX,EAUoCK,UAAU,gBAAeC,SAAA,EACvDpB,EAAAA,EAAAA,KAAA,SAAOmB,UAAU,cAAcgB,QAAQ,QAAOf,SAAC,WAC/CpB,EAAAA,EAAAA,KAAA,SACEoC,GAAG,QACHC,KAAK,QACLC,YAAY,cACZC,MAAOhC,EACPiC,SAAWd,GAAMlB,EAASkB,EAAE9B,OAAO2C,OACnCpB,UAAU,cACVsB,UAAQ,KAGVzC,EAAAA,EAAAA,KAAA,SAAOmB,UAAU,cAAcgB,QAAQ,WAAUf,SAAC,cAClDpB,EAAAA,EAAAA,KAAA,SACEoC,GAAG,WACHC,KAAK,WACLC,YAAY,iBACZC,MAAO9B,EACP+B,SAAWd,GAAMhB,EAAYgB,EAAE9B,OAAO2C,OACtCpB,UAAU,cACVsB,UAAQ,KAGVzC,EAAAA,EAAAA,KAAA,SAAOmB,UAAU,cAAcgB,QAAQ,kBAAiBf,SAAC,sBACzDpB,EAAAA,EAAAA,KAAA,SACEoC,GAAG,kBACHC,KAAK,WACLC,YAAY,mBACZC,MAAO5B,EACP6B,SAAWd,GAAMd,EAAmBc,EAAE9B,OAAO2C,OAC7CpB,UAAU,cACVsB,UAAQ,KAGVzC,EAAAA,EAAAA,KAAA,UAAQqC,KAAK,SAASlB,UAAU,kBAAiBC,SAAC,iBAEpDC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,aAAYC,SAAA,CAAC,6BACCpB,EAAAA,EAAAA,KAAA,KAAG0C,KAAK,IAAGtB,SAAC,kBAGrC,C","sources":["components/LazyImages.js","components/RegisterPage.js"],"sourcesContent":["// LazyImage.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport '../style/LazyImages.css'\r\n\r\nconst LazyImage = ({ src, alt }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const imgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            setIsVisible(true);\r\n            observer.unobserve(entry.target);\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    if (imgRef.current) {\r\n      observer.observe(imgRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (imgRef.current) observer.unobserve(imgRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <img\r\n      ref={imgRef}\r\n      src={isVisible ? src : \"\"}\r\n      data-src={src}\r\n      alt={alt}\r\n      loading=\"lazy\"\r\n      style={{ opacity: isVisible ? 1 : 0.5, transition: \"opacity 0.5s\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LazyImage;\r\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../style/RegisterPage.css'; \nimport logo from '../assets/images/bantay_hayop_logo.png';\nimport LazyImage from './LazyImages';\n\nconst RegisterPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const navigate = useNavigate();\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    try {\n      // Make POST request to register endpoint\n      const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/admin/register`, {\n        email,\n        password,\n      });\n\n      // Handle success response\n      if (response.status === 201) {\n        setSuccess('Account created! Please verify your email.');\n        // Optionally navigate to login after a few seconds\n        setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds\n      }\n    } catch (error) {\n      if (error.response) {\n        // Use error messages returned from the backend\n        setError(error.response.data.message || 'Failed to register. Please try again.');\n      } else {\n        setError('Failed to register. Please try again.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"register-wrapper\"> \n      <div className=\"register-container\">\n        <LazyImage src={logo} alt=\"Logo\" className=\"logo\" loading=\"lazy\"  />\n        <h2 className=\"register-title\">Register</h2>\n        {error && <p className=\"error-message\">{error}</p>}\n        {success && <p className=\"success-message\">{success}</p>}\n        <form onSubmit={handleRegister} className=\"register-form\">\n          <label className=\"input-label\" htmlFor=\"email\">Email</label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"Enter email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"input-field\"\n            required\n          />\n\n          <label className=\"input-label\" htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"Enter password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"input-field\"\n            required\n          />\n\n          <label className=\"input-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n          <input\n            id=\"confirmPassword\"\n            type=\"password\"\n            placeholder=\"Confirm password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            className=\"input-field\"\n            required\n          />\n\n          <button type=\"submit\" className=\"register-button\">Register</button>\n        </form>\n        <p className=\"login-link\">\n          Already have an account? <a href=\"/\">Log In</a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["_ref","src","alt","isVisible","setIsVisible","useState","imgRef","useRef","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","target","threshold","current","observe","_jsx","ref","loading","style","opacity","transition","RegisterPage","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","navigate","useNavigate","className","children","_jsxs","LazyImage","logo","onSubmit","async","e","preventDefault","axios","post","status","setTimeout","response","data","message","htmlFor","id","type","placeholder","value","onChange","required","href"],"sourceRoot":""}